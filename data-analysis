#you need to download the dataset from Kaggle and load it into a pandas dataframe.


import pandas as pd

df = pd.read_csv('tmdb_5000_movies.csv')
Next, you need to preprocess the data by selecting relevant features, handling missing values, and converting categorical features into numerical features using one-hot encoding.

# exploratory analysis
# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# Select relevant features
df = df[['budget', 'genres', 'keywords', 'original_language', 'popularity', 'production_companies', 'release_date', 'revenue', 'runtime', 'vote_average', 'vote_count']]


# histograms
plt.hist(df["budget"], bins=20)
plt.xlabel("Budget")
plt.ylabel("Frequency")
plt.show()

# box plots
sns.boxplot(x="status", y="revenue", data=df)
plt.xlabel("Status")
plt.ylabel("Revenue")
plt.show()

# scatter plots
plt.scatter(df["runtime"], df["vote_average"])
plt.xlabel("Runtime")
plt.ylabel("Vote Average")
plt.show()

# correlation matrix
corr = df.corr()
sns.heatmap(corr, annot=True, cmap="YlGnBu")
plt.show()


# Drop missing values
df.dropna(inplace=True)

# One-hot encode categorical features
df = pd.concat([df, pd.get_dummies(df['genres'].apply(pd.Series).stack().reset_index(drop=True), prefix='genre')], axis=1)
df = pd.concat([df, pd.get_dummies(df['keywords'].apply(pd.Series).stack().reset_index(drop=True), prefix='keyword')], axis=1)
df = pd.concat([df, pd.get_dummies(df['production_companies'].apply(pd.Series).stack().reset_index(drop=True), prefix='company')], axis=1)
df.drop(['genres', 'keywords', 'production_companies'], axis=1, inplace=True)

# Convert release_date to datetime and extract year, month, and day
df['release_date'] = pd.to_datetime(df['release_date'])
df['release_year'] = df['release_date'].apply(lambda x: x.year)
df['release_month'] = df['release_date'].apply(lambda x: x.month)
df['release_day'] = df['release_date'].apply(lambda x: x.day)
df.drop(['release_date'], axis=1, inplace=True)

#you need to split the data into training and testing sets and train different machine learning models on the training data.
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Split data into training and testing sets
X = df.drop(['revenue'], axis=1)
y = df['revenue']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train linear regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)
lr_score = mean_squared_error(y_test, lr_pred)

# Train decision tree model
dt_model = DecisionTreeRegressor()
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
dt_score = mean_squared_error(y_test, dt_pred)

# Train random forest model
rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
rf_score = mean_squared_error(y_test, rf_pred)

#compare the performance of the different models based on their mean squared error (MSE) scores and choose the best one to make predictions on new data.
print('Linear Regression MSE:', lr_score)
print('Decision Tree MSE:', dt_score)
print('Random Forest MSE:', rf_score)

# Predict revenue of new movie
new_movie = pd.DataFrame({
    'budget': [100000000],
    'original_language': ['en'],
    'popularity': [10],
    'runtime': [120],
    'vote_average': [7.5],
    'vote_count': [500],
    'genre_Action': [0],
    'genre_Adventure': [1],
    'genre_Animation': [0],
    'genre_Comedy': [0],
    'genre_Crime': [0],
    'genre_Documentary': [0],
    'genre_Drama': [0],
    'genre_Family': [0],
    'genre_Fantasy': [1],
    'genre_Foreign': [0],
    'genre_History': [0],
    'genre_Horror': [0],
    'genre_Music': [0],
    'genre_Mystery': [0],
    'genre_Romance': [0],
    'genre_Science Fiction': [0],
    'genre_TV Movie': [0],
    'genre_Thriller': [0],
    'genre_War': [0],
    'genre_Western': [0],
    'keyword_based on novel': [1],
    'company_Disney': [0],
    'company_Marvel Studios': [1],
    'release_year': [2023],
    'release_month': [6],
    'release_day': [30]
})
new_movie = pd.concat([new_movie, pd.get_dummies(new_movie['original_language'], prefix='language')], axis=1)
new_movie.drop(['original_language'], axis=1, inplace=True)

# Use random forest model to predict revenue of new movie
new_movie_pred = rf_model.predict(new_movie)
print('Predicted revenue of new movie:', new_movie_pred[0])
